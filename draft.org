* Manuscrit [0/7]

** TODO Introduction (5 pages)

- [REMARK] Will be in both French and English

*** TODO HSE Definition (2 pages)

- A /Trusted Software Components/ configure /Hardware Components/ to constrain
  /Untrusted Software Components/ execution with respect to /Security
  Properties/.
- [REMARK] /micro/-architectural attacks are out of scope

*** TODO Why Formally Specifying and Verifying (1 page)

- Formal approach to specify and verify HSE which benefits to hw and sw people.
- Coq provides two useful features: expressiveness and extraction

*** TODO Thesis Contributions (2 pages)

One objective: specifying and verifying HSE:

- A formalism to achieve our goal, which leverages hw models (SpecCert)
- An approach to manage mult-components system (FreeSpec)
- In both case, (1) Coq developments and (2) SMRAM Cache Poisoning example

Link between them: SpecCert requires a model of the hardware architecture, but
the scale of mainstream architectures (x86) remains challenging.


** TODO Case Study: x86 (10 pages)

- Give an overview of a partial (advertise that it is partial) x86 architecture
  (as in FreeSpec)
  + hw components
  + nature of sw stacks
- Describe several HSE, plus give an example on how they have been attacked:
  + MMU (and lack of IOMMU)
  + Flash Lock (and SpeedRacer)
  + SMRAM Lock (and SMRAM Cache Poisoning in depth + mention Sinkhole)


** TODO Related Works (20 pages)

- Long term goal: how sw should use hw, from a security perspective?
- Starting point: critical software component are verified upon very simplified
  hardware model, while hardware are modeled/verified independently from the
  software to be executed.
- Regarding the complexity and the scope, connecting specification (rather than
  implementation) is a first important step. Project like DeepSpec already
  explore how to connect abstraction layers, from specs to implementation

*** HW Functional Correctness

- Industrial efforts: ARM, Intel
- Secure Architecture with strong isolation property (XOM)
- Verifying hardware circuits: Coquet, Kami

*** Software Specifications

- Proving one software: VirtCert, MMU, CertikOS
- Proving more general properties about software: RockSalt, Moat, ProTIP

*** Modelling Complex Systems

- Kami as a transition?
- ProTIP (PCI)
- Alloy
- Multi-components modelling: share of responsibility and abstraction of
  underlying layers


** TODO Formally Specifying and Verifying HSE (20 pages)


** TODO SMRAM Isolation HSE (10 pages)


** TODO Modularly Specify and Verify Components of a System (20 pages)


** TODO FreeSpec Framework (10 pages)

*** Extensible Effects

**** Why?
**** The `Use` Typeclass
**** The `Use` Instances

*** Abstract Specification

**** Undefined Behavior
**** Declarative Policies

*** Extraction (?)


** TODO Conclusion (3 pages)
